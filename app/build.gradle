plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.jetbrainsKotlinAndroid)
    alias(libs.plugins.kotlinKapt)
    alias(libs.plugins.kotlinSerialization)
    alias(libs.plugins.kotlinParcelize)
    alias(libs.plugins.dagger.hilt)
}

def properties = new Properties()
properties.load(new FileInputStream(rootProject.file("local.properties")))

android {
    namespace 'com.solux.flory'
    compileSdk 34

    defaultConfig {
        applicationId "com.solux.flory"
        minSdk 30
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "FLORY_BASE_URL", properties.getProperty("flory.base.url"))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    // AndroidX
    implementation(libs.bundles.androidx)

    // Google
    implementation(libs.material)

    // Test
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)

    // Network
    implementation(libs.bundles.okhttp)
    implementation(libs.bundles.retrofit)
    implementation(platform(libs.okhttp3.bom))
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.kotlinx.datetime)

    // Third-Party
    implementation(libs.timber)
    implementation(libs.coil)

    // Hilt
    implementation(libs.dagger.hilt)
    kapt(libs.dagger.hilt.compiler)
    androidTestImplementation(libs.dagger.hilt.testing)
    kaptAndroidTest(libs.dagger.hilt.testing.compiler)

    // Preference Datastore
    implementation(libs.preference.datastore)

    // Navigation
    implementation(libs.bundles.navigation)

    // Splash
    implementation(libs.splash)
}